<?php

namespace Tests\Feature;

use App\Transaction;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use TestDataSeeder;
use Tests\TestCase;

class TransactionApiTest extends TestCase
{

    use DatabaseMigrations;
    use RefreshDatabase;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed(TestDataSeeder::class);
    }

    /**
     *
     */
    public function testGetTransactions()
    {

        $intRandomNoOfTransactions = rand(10, 20);

        // we have one and only user now
        factory(Transaction::class, $intRandomNoOfTransactions)->create([
            'user_id' => 1,
            'planned_at' => function () {
                return Carbon::now()->startOfMonth()->addDays(rand(0, 30));
        }]);

        // make a call
        $response = $this->json('GET', '/api/transaction');

        // check response
        $response->assertStatus(200);
        $response->assertJsonCount($intRandomNoOfTransactions, 'data');


    }

    //TODO: rename this method
    //TODO: add php doc
    public function testGetTransactionsBetweenValidDates()
    {

        $intRandomNoOfTransactions = rand(10, 20);

        $from = Carbon::now()->startOfMonth();
        $to = Carbon::now()->endOfMonth();

        // we have one and only user now
        factory(Transaction::class, $intRandomNoOfTransactions)->create([
            'user_id' => 1,
            'planned_at' => function () {
                return Carbon::now()->startOfMonth()->addDays(rand(0, 30));
        }]);

        // make a call
        $response = $this->json('GET',
            "/api/transaction?from={$from->format('Y-m-d')}&to={$to->format('Y-m-d')}");


        // check response
        $response->assertStatus(200);
        $response->assertJsonCount($intRandomNoOfTransactions, 'data');


    }

    public function testGetTransactionListBetweenInvalidDates() {

        $response = $this->json('GET',
            "/api/transaction?from=2018-03-20&to=2017-01-01");


        $response->assertStatus(422);
        $response->assertJsonFragment(['message']);
        $response->assertJsonFragment(['errors']);
        $response->assertJsonFragment(['from']);
        $response->assertJsonFragment(['to']);



    }

    public function testGetSingleTransaction()
    {


        $transaction = factory(Transaction::class, 1)->create(['user_id' => 1])->first();
        $id = $transaction->id;

        $response = $this->json('GET', '/api/transaction/' . $id);


        $response->assertStatus(200);


        //TODO: add other fields to test
        $response->assertJson(['data' => [
            'id' => $id,
            'amount' => $transaction->amount
        ]]);


    }

    public function testPostSimpleTransaction()
    {

        $transaction = factory(Transaction::class, 1)->make(['user_id' => 1])->first();

        $response = $this->json('POST', '/api/transaction', ['transaction' => $transaction]);

        $response->assertStatus(200);

    }

    public function testPostTransactionValidation()
    {

        $response = $this->json('POST', '/api/transaction', []); // send empty request

        $response->assertStatus(422); // expect validation errors

        $response->assertJsonValidationErrors(['transaction']);


    }
}
